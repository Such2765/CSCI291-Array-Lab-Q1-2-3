// Linking Libraries
#include <stdio.h>
#include <stdbool.h> 
#include <stdlib.h>

// Variables
int SIZE = 24;
int nRows = 8;
int nCols = 3;

// Functions
void print_array(int arr[], int length);
void print_matrix(int mat[][nCols], int rows);
bool isValid(const int arr[], int length, int pos);
void remove_element(int arr[], int length, int pos);
void insert_element(int arr[], int length, int pos, int value);
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]);
bool found_duplicate(int arr[], int length);

int main() {
    int arr[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
    int arr2d[nRows][nCols];
    int userInput;
    int length = sizeof(arr) / sizeof(arr[0]);
    int rem_ele;
    int ins_ele_pos;
    int ins_ele;

    print_array(arr,SIZE);
    print_matrix(arr2d,nRows);

    // Switch Statement for user to choose their preferred task
    printf("\n\nThis program allows user to make changes to the array and matrix printed earlier.\n");
    printf("Choose your preferred task from the list below by inputting their respective integers.\n");
    printf("\n--------------- ARRAY TASKS ---------------");
    printf("\n1) Check Validity Of Array");
    printf("\n2) Remove An Array Element");
    printf("\n3) Insert Array Element");
    printf("\n4) Convert 1D Arrat To A 2D Array");
    printf("\n5) Check For Duplicate Values In Array");
    printf("\n-------------- MATRIX TASKS ---------------");
    printf("\n6) Transpose The Matrix");
    printf("\n-------------------------------------------\n\n");

    printf("\nInput Selection - ");
    scanf("%d", &userInput);
    switch (userInput) {
        case 1:{
            printf("You have selected to check validity of the array");
            break;
        }
    
        case 2:{
            printf("You have chosen to remove an element in the array");
            printf("\nWhich element would you like to remove, input the number - \n");
            scanf("%d",&rem_ele);
            remove_element(arr, SIZE, rem_ele);
            for (int i = 0; i < SIZE; i++) printf("%d ", arr[i]);
            printf("\n");
            printf("\nYou have sucessfully removed element %d",rem_ele);
            break;
        }

        case 3:{
            printf("You have chosen to insert an new second element in array");
            printf("\nWhich position would you like to add the element?");
            scanf("%d",&ins_ele_pos);
            printf("\nWhat value would you like to insert into the array?");
            scanf("%d",&ins_ele);
            insert_element(arr, SIZE, ins_ele_pos, ins_ele);
            for (int i = 0; i < SIZE; i++) printf("%d ", arr[i]);
            printf("\n");
            break;
        }
            
        case 4:{
            printf("You have chosen to convert a 1D array into a 2D array");
            int arr2d[5][5];
            reshape(arr, SIZE, 5, 5, arr2d);
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    printf("%d ", arr2d[i][j]);
        }
        printf("\n");
    }
            break;
        }

        case 5:{
            printf("You have chosen to see any duplicated in the array");
            printf("Testing found_duplicate:\n");
            bool hasDuplicate = found_duplicate(arr, SIZE);
            printf("Duplicates found: %s\n", hasDuplicate ? "Yes" : "No");
            break;
        }

        case 6:{
            printf("You have chosen to Transpose a matrix");
            printf("Testing trans_matrix:\n");
            int mat_transp[5][5];
            trans_matrix(5, 5, arr2d, mat_transp);
            for (int i = 0; i < 5; i++) {
                for (int j = 0; j < 5; j++) {
                    printf("%d ", mat_transp[i][j]);
        }
        printf("\n");
    }
            break;
        }

        default:{
            printf("Invalid Choice. Executing program! Please Try Again");
            break;
        }
    }
    return 0;
}


// Function To Print The Array
void print_array(int arr[], int length){
   printf("2D Array - ");
   for (int i = 0; i <= length; i++)
        printf("%d ", i, arr[i]);
        printf("\n\n");
}

// Function To Print The Matrix
void print_matrix(int mat[][nCols], int rows){
    printf("3D Matrix - \n");
   for(int i = 1;i<=rows; i++){
       for(int j = 1;j<=nCols; j++){
            printf("%d ",i,j, mat[i][j]);
       }
    puts("");     
   }     
}

// Function to check if the position is valid
bool isValid(const int arr[], int length, int pos) {
    return pos >= 0 && pos < length;
}

// Function to remove an element from the array
void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Error: Invalid position %d\n", pos);
        return;
    }
    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (length)--; // Reduce the size of the array
}

// Function to insert an element into the array
void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length, pos)) {
        printf("Error: Invalid position %d\n", pos);
        return;
    }
    for (int i = length - 1; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
}

// Function to reshape a 1D array into a 2D array
void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Error: Invalid dimensions for reshape. Length = %d, nRows * nCols = %d\n", length, nRows * nCols);
        return;
    }
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[col * nRows + row];
        }
    }
}

// Function to transpose a matrix
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]) {
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat_transp[j][i] = mat[i][j];
        }
    }
}

// Function to check for duplicates in an array
bool found_duplicate(int arr[], int length) {
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}
