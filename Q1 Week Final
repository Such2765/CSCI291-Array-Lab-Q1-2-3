// Linking Libraries
#include <stdio.h>
#include <stdbool.h> 
#include <stdlib.h>

// Variables
int SIZE = 24;
int nRows = 8;
int nCols = 3;
int userInput;

// Functions
bool isValid(const int arr[], int SIZE, int pos);
void remove_element(int arr[], int SIZE, int pos);
void insert_element(int arr[], int SIZE, int pos, int value);
void reshape(const int arr[], int SIZE, int nRows, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]);
bool found_duplicate(int arr[], int SIZE);
void print_array(int arr[], int SIZE);
void print_matrix(int mat[][nCols], int rows);

// Function To Check Validity
bool isValid(const int arr[], int SIZE, int pos) {
    return (pos >= 0 && pos < SIZE);
}

// Function To Remove An Array Element
void remove_element(int arr[], int SIZE, int pos) {
    if (!isValid(arr, SIZE, pos)) {
        printf("Invalid index: %d\n", pos);
        return;
    }
    for (int i = pos; i < SIZE - 1; i++) {
        arr[i] = arr[i + 1];
    }
}

// Function To Insert An Array Element
void insert_element(int arr[], int SIZE, int pos, int value) {
    if (!isValid(arr, SIZE, pos)) {
        printf("Invalid index: %d\n", pos);
        return;
    }
    for (int i = SIZE - 1; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
}

// Function To Convert A 1D Array Into A 2D Array
void reshape(const int arr[], int SIZE, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (SIZE != nRows * nCols) {
        printf("Error: Cannot reshape array of SIZE %d into %dx%d matrix.\n", SIZE, nRows, nCols);
        return;
    }
    int k = 0;
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[k++];
        }
    }
}

// Function To Transpose A Matrix
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat_transp[nCols][nRows]) {
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat_transp[j][i] = mat[i][j];
        }
    }
}

// Function To Check For Duplicate Values In An Array
bool found_duplicate(int arr[], int SIZE) {
    for (int i = 0; i < SIZE - 1; i++) {
        for (int j = i + 1; j < SIZE; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}

// Function To Print The Array
void print_array(int arr[], int SIZE){
   printf("2D Array - ");
   for (int i = 1; i <= SIZE; i++)
        printf("%d ", i, arr[i]);
        printf("\n\n");
}

// Function To Print The Matrix
void print_matrix(int mat[][nCols], int rows){
    printf("3D Matrix - \n");
   for(int i = 1;i<=rows; i++){
       for(int j = 1;j<=nCols; j++){
            printf("%d ",i,j, mat[i][j]);
       }
    puts("");     
   }     
}


int main() {
    int arr[SIZE];
    int arr2d[nRows][nCols];
    int rem_ele;

    print_array(arr,SIZE);
    print_matrix(arr2d,nRows);

    printf("\n\nThis program allows user to make changes to the array and matrix printed earlier.\n");
    printf("Choose your preferred task from the list below by inputting their respective integers.\n");
    printf("\n--------------- ARRAY TASKS ---------------");
    printf("\n1) Check Validity Of Array");
    printf("\n2) Remove Array Element");
    printf("\n3) Insert Array Element");
    printf("\n4) Convert 1D Arrat To A 2D Array");
    printf("\n5) Check For Duplicate Values In Array");
    printf("\n-------------- MATRIX TASKS ---------------");
    printf("\n6) Transpose The Matrix");
    printf("\n-------------------------------------------\n\n");
    printf("Input Selection - ");
    scanf("%d",userInput);

        switch (userInput)
        {
        case 1: {
            printf("Original array: ");
            for (int i = 0; i < SIZE; i++) printf("%d ", arr[i]);
            printf("\n");
            print_array(arr,SIZE);
            break;
        }  case 2:{ remove_element(arr, SIZE, 2);
            printf("After removing element at index 2: ");
            for (int i = 0; i < SIZE; i++) printf("%d ", arr[i]);
            printf("\n");
            print_array(arr,SIZE);
            break;
        } case 3:{ insert_element(arr, SIZE, 2, 80);
            printf("After inserting 80 at index 2: ");
            for (int i = 0; i < SIZE; i++) printf("%d ", arr[i]);
            printf("\n");
            print_array(arr,SIZE);
            break;
        } case 4:{ int arr2d[2][3];
            reshape(arr, SIZE, 2, 3, arr2d);
            printf("Reshaped 2D array (column by column):\n");
            for (int i = 0; i < 2; i++) {
                for (int j = 0; j < 3; j++) {
                    printf("%d ", arr2d[i][j]);
                }
            printf("\n");
            print_array(arr,SIZE);
            break;
            }
            break;
        } case 5:{ bool has_duplicates = found_duplicate(arr, SIZE);
            printf("Array has duplicates: %s\n", has_duplicates ? "true" : "false");
            print_array(arr,SIZE);
            break;
        } case 6:{
            int mat[2][3] = {{1, 2, 3}, {4, 5, 6}};
            int mat_transp[3][2];
            trans_matrix(2, 3, mat, mat_transp);
            printf("Transposed matrix:\n");
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 2; j++) {
                    printf("%d ", mat_transp[i][j]);
                }
                printf("\n");
                print_matrix(arr2d,nRows);
            break;
        } default:{
            printf("Incorrect Selection Made! Please Try Again");
            break;
        }
    return 0;
            }
        }
}
